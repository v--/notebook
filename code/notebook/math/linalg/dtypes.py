from typing import Literal, overload


@overload
def field_of(dtype: type[int]) -> type[float]: ...
@overload
def field_of[N: (float, complex)](dtype: type[N]) -> type[N]: ...
def field_of(dtype: type) -> type:
    if dtype is int:
        return float

    return dtype


@overload
def is_dtype_convertible(a: type[int], b: type[int]) -> Literal[True]: ...
@overload
def is_dtype_convertible(a: type[int], b: type[float]) -> Literal[True]: ...
@overload
def is_dtype_convertible(a: type[int], b: type[complex]) -> Literal[True]: ...
@overload
def is_dtype_convertible(a: type[float], b: type[int]) -> Literal[False]: ...
@overload
def is_dtype_convertible(a: type[float], b: type[float]) -> Literal[True]: ...
@overload
def is_dtype_convertible(a: type[float], b: type[complex]) -> Literal[True]: ...
@overload
def is_dtype_convertible(a: type[complex], b: type[int]) -> Literal[False]: ...
@overload
def is_dtype_convertible(a: type[complex], b: type[float]) -> Literal[False]: ...
@overload
def is_dtype_convertible(a: type[complex], b: type[complex]) -> Literal[True]: ...
def is_dtype_convertible(a: type, b: type) -> bool:
    return issubclass(a, b)
